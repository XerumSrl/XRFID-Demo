@page "/Products/Edit/{Id:guid}"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using XRFID.Demo.Server.Database;
@using XRFID.Demo.Server.Entities;
@using XRFID.Demo.Server.Repositories;
@using XRFID.Demo.Server.ViewModels;
@inject NavigationManager Navigation;
@inject SkuRepository skuRepository;
@inject ProductRepository productRepository;
@inject UnitOfWork uow;
@inject ISnackbar snackbar;

<h1>Edit Product @model.Name?</h1>

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Disabled="@isDisabled">
    <MudStack Class="my-3">
        <MudTextField T="string" Variant="Variant.Outlined" Label="Sku" @bind-Value="skuName" ReadOnly=true />
        <MudTextField T="string" Variant="Variant.Outlined" Required="true" OnlyValidateIfDirty="true" Label="Name" For="()=>model.Name" @bind-Value="model.Name" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Required="true" OnlyValidateIfDirty="true" Label="Code" For="()=>model.Code" @bind-Value="model.Code" />
        <MudTextField T="string" Variant="Variant.Outlined" Required="true" OnlyValidateIfDirty="true" Label="Description" For="()=>model.Description" @bind-Value="model.Description" />
        <MudTextField T="string" Variant="Variant.Outlined" Required="true" OnlyValidateIfDirty="true" Label="EPC" For="()=>model.Epc" @bind-Value="model.Epc" HelperText="24 or 32 characther HEX string" />
        <MudTextField T="string" Variant="Variant.Outlined" Required="true" OnlyValidateIfDirty="true" Label="Serial Number" For="()=>model.SerialNumber" @bind-Value="model.SerialNumber" />

        <MudStack Row="true" Class="my-6 d-flex justify-end">
            <MudButton OnClick="@(()=> Back())" Variant="Variant.Outlined" Color="Color.Default" Class="ml-3">Back</MudButton>
            <MudButton OnClick="@(async ()=> await Submit())" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3">Submit</MudButton>
        </MudStack>
    </MudStack>
</MudForm>


@code {
    [Parameter]
    public Guid Id { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;
    private Product? product;
    private AddProductModel model = new();
    private string skuName = "Sku Not found";
    private bool isDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        product = await productRepository.GetAsync(Id, "Sku");
        isDisabled = product == null;

        if (product is null)
        {
            return;
        }

        Sku? sku = await skuRepository.GetAsync(product.SkuId);

        if (sku is null)
        {
            return;
        }

        skuName = sku.Name;

        model = new AddProductModel
            {
                Name = product.Name ?? string.Empty,
                Description = product.Description,
                Epc = product.Epc,
                ContentQuantity = product.ContentQuantity,
                SerialNumber = product.SerialNumber,
                Note = product.Note,
                Code = product.Code,
                SkuId = product.SkuId
            };

    }

    private async Task Submit()
    {
        await form.Validate();

        if (product is null || !form.IsValid)
        {
            return;
        }

        // if (!(await IsEpcUniqueAsync(model.Epc)))
        // {
        //     snackbar.Add($"Epc {model.Epc} already in use.", MudBlazor.Severity.Error);
        //     return;
        // }

        Product result = await productRepository.UpdateAsync(new Product
            {
                Id = product.Id,
                Name = model.Name,
                Description = model.Description,
                Code = model.Code,
                Note = model.Note,
                Epc = model.Epc,
                ContentQuantity = model.ContentQuantity,
                SerialNumber = model.SerialNumber,
                SkuId = product.SkuId,

            });
        await uow.SaveAsync();
        //fare comparire un popup che inserimento ok e rimanare alla pagina

        snackbar.Add($"Product {model.Name} updated.", MudBlazor.Severity.Success);

        Navigation.NavigateTo($"Products");

        StateHasChanged();
    }

    private void Back()
    {
        Navigation.NavigateTo($"Products");
    }

    private async Task<bool> IsEpcUniqueAsync(string epc)
    {
        return !(await productRepository.GetAsync(q => q.Epc == epc)).Any();
    }

}
