// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XRFID.Server.Demo.V2.Database;

#nullable disable

namespace XRFID.Server.Demo.V2.Migrations
{
    [DbContext(typeof(XRFIDSampleContext))]
    [Migration("20241018143908_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Labels", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName1");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attribute1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attribute2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsolidated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MovementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovementId");

                    b.HasIndex("ReaderId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("LoadingUnits", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName2");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnitItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attribute1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attribute2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Epc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConsolidated")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoadingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("LoadingUnitItems", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName3");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Locations", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName4");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attribute1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attribute2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsolidated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<bool>("MissingItem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OverflowItem")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PrinterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("UnexpectedItem")
                        .HasColumnType("bit");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrinterId");

                    b.HasIndex("ReaderId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Movements", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName5");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.MovementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attribute1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attribute2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Epc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FirstRead")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("IgnoreUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsConsolidated")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastRead")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("LoadingUnitItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReadsCount")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("Rssi")
                        .HasColumnType("smallint");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitItemId");

                    b.HasIndex("MovementId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("MovementItems", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName6");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Printer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MacAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Printers", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName7");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attrib1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attrib2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attrib3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ContentUom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Epc")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Epc")
                        .IsUnique()
                        .HasFilter("[Epc] IS NOT NULL");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.HasIndex("SkuId");

                    b.ToTable("Products", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName8");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.RawTagHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Azimuth")
                        .HasColumnType("float");

                    b.Property<int>("AzimuthConfidentiality")
                        .HasColumnType("int");

                    b.Property<double>("AzimuthRadians")
                        .HasColumnType("float");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<double>("DistanceCorrection")
                        .HasColumnType("float");

                    b.Property<double>("DistanceRadians")
                        .HasColumnType("float");

                    b.Property<double>("Elevation")
                        .HasColumnType("float");

                    b.Property<int>("ElevationConfidentiality")
                        .HasColumnType("int");

                    b.Property<double>("ElevationRadians")
                        .HasColumnType("float");

                    b.Property<string>("Epc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReaderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResultX")
                        .HasColumnType("float");

                    b.Property<double>("ResultY")
                        .HasColumnType("float");

                    b.Property<double>("ResultZ")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RawTagHistory");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Antennas")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("HeartbeatTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LocationingEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MacAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReaderMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReaderOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Readers", t =>
                        {
                            t.HasTrigger("ModelName");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Sku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attrib1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attrib2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attrib3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EffectivityEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EffectivityStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OldSkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Part")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdaterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OldSkuId")
                        .IsUnique()
                        .HasFilter("[OldSkuId] IS NOT NULL");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Skus", t =>
                        {
                            t.HasTrigger("ModelName")
                                .HasDatabaseName("ModelName9");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnit", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Movement", null)
                        .WithMany("LoadingUnits")
                        .HasForeignKey("MovementId");

                    b.HasOne("XRFID.Server.Demo.V2.Entities.Reader", "Reader")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnitItem", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.LoadingUnit", "LoadingUnit")
                        .WithMany("LoadingUnitItems")
                        .HasForeignKey("LoadingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoadingUnit");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Location", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Location", "ParentLocation")
                        .WithMany("ChildLocations")
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Movement", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Printer", "Printer")
                        .WithMany("Movements")
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XRFID.Server.Demo.V2.Entities.Reader", "Reader")
                        .WithMany("Movements")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Printer");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.MovementItem", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.LoadingUnitItem", "LoadingUnitItem")
                        .WithMany("MovementItems")
                        .HasForeignKey("LoadingUnitItemId");

                    b.HasOne("XRFID.Server.Demo.V2.Entities.Movement", "Movement")
                        .WithMany("MovementItems")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XRFID.Server.Demo.V2.Entities.Product", "Product")
                        .WithMany("MovementItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("LoadingUnitItem");

                    b.Navigation("Movement");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Printer", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Location", null)
                        .WithMany("Printers")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Product", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Sku", "Sku")
                        .WithMany("Products")
                        .HasForeignKey("SkuId");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Reader", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Location", null)
                        .WithMany("Readers")
                        .HasForeignKey("LocationId");

                    b.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPIOConfiguration", "GPIOConfiguration", b1 =>
                        {
                            b1.Property<Guid>("ReaderId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ReaderId");

                            b1.ToTable("Readers");

                            b1.ToJson("GPIOConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("ReaderId");

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPIConfiguration", "GPInCustom", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPIConfiguration", "GPInSwitch", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPIConfiguration", "GPInTrigger", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPOConfiguration", "GPOutBuzzer", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Duration")
                                        .HasColumnType("int");

                                    b2.Property<int>("Frequence")
                                        .HasColumnType("int");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPOConfiguration", "GPOutGreenLED", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Duration")
                                        .HasColumnType("int");

                                    b2.Property<int>("Frequence")
                                        .HasColumnType("int");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPOConfiguration", "GPOutRedLED", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Duration")
                                        .HasColumnType("int");

                                    b2.Property<int>("Frequence")
                                        .HasColumnType("int");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.GPIOCfg.GPOConfiguration", "GPOutYellowLED", b2 =>
                                {
                                    b2.Property<Guid>("GPIOConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Duration")
                                        .HasColumnType("int");

                                    b2.Property<int>("Frequence")
                                        .HasColumnType("int");

                                    b2.Property<bool>("LogicOn")
                                        .HasColumnType("bit");

                                    b2.Property<int>("Pin")
                                        .HasColumnType("int");

                                    b2.HasKey("GPIOConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("GPIOConfigurationReaderId");
                                });

                            b1.Navigation("GPInCustom");

                            b1.Navigation("GPInSwitch");

                            b1.Navigation("GPInTrigger");

                            b1.Navigation("GPOutBuzzer");

                            b1.Navigation("GPOutGreenLED");

                            b1.Navigation("GPOutRedLED");

                            b1.Navigation("GPOutYellowLED");
                        });

                    b.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.ReaderConfiguration", "ReaderConfiguration", b1 =>
                        {
                            b1.Property<Guid>("ReaderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ReaderIp")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ReaderManufacturer")
                                .HasColumnType("int");

                            b1.Property<string>("ReaderName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReaderPort")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReaderId");

                            b1.ToTable("Readers");

                            b1.ToJson("ReaderConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("ReaderId");

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.ModeSpecificSettings", "ModeSpecificSettings", b2 =>
                                {
                                    b2.Property<Guid>("ReaderConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("ReaderConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("ReaderConfigurationReaderId");

                                    b2.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.DirectionalityAdvancedConfig", "AdvancedConfig", b3 =>
                                        {
                                            b3.Property<Guid>("ModeSpecificSettingsReaderConfigurationReaderId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double?>("BackgroundProcessingIntervalSeconds")
                                                .HasColumnType("float");

                                            b3.Property<int?>("DebugLevel")
                                                .HasColumnType("int");

                                            b3.Property<double?>("HysteresisFeet")
                                                .HasColumnType("float");

                                            b3.Property<double?>("MaDurationSeconds")
                                                .HasColumnType("float");

                                            b3.Property<int?>("MaxTagsLimit")
                                                .HasColumnType("int");

                                            b3.Property<string>("ReportDirection")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<bool?>("ReportNew")
                                                .HasColumnType("bit");

                                            b3.Property<bool?>("ReportRaw")
                                                .HasColumnType("bit");

                                            b3.Property<bool?>("ReportTimedOut")
                                                .HasColumnType("bit");

                                            b3.Property<bool?>("ReportTransition")
                                                .HasColumnType("bit");

                                            b3.Property<double?>("ReportUpdateDurationSeconds")
                                                .HasColumnType("float");

                                            b3.Property<bool?>("ReportZoneHistory")
                                                .HasColumnType("bit");

                                            b3.Property<int?>("SigmaMultiplier")
                                                .HasColumnType("int");

                                            b3.Property<double?>("TagTimeoutSecondsDefault")
                                                .HasColumnType("float");

                                            b3.Property<double?>("TagTimeoutSecondsMax")
                                                .HasColumnType("float");

                                            b3.Property<double?>("TagTimeoutSecondsMin")
                                                .HasColumnType("float");

                                            b3.HasKey("ModeSpecificSettingsReaderConfigurationReaderId");

                                            b3.ToTable("Readers");

                                            b3.WithOwner()
                                                .HasForeignKey("ModeSpecificSettingsReaderConfigurationReaderId");

                                            b3.OwnsMany("XRFID.Server.Demo.V2.Entities.ReaderCfg.DirectionalityAdvancedConfigAars", "Aars", b4 =>
                                                {
                                                    b4.Property<Guid>("DirectionalityAdvancedConfigModeSpecificSettingsReaderConfigurationReaderId")
                                                        .HasColumnType("uniqueidentifier");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("int");

                                                    b4.Property<string>("Address")
                                                        .HasColumnType("nvarchar(max)");

                                                    b4.Property<double?>("Offset")
                                                        .HasColumnType("float");

                                                    b4.Property<double?>("X")
                                                        .HasColumnType("float");

                                                    b4.Property<double?>("Y")
                                                        .HasColumnType("float");

                                                    b4.Property<double?>("Z")
                                                        .HasColumnType("float");

                                                    b4.HasKey("DirectionalityAdvancedConfigModeSpecificSettingsReaderConfigurationReaderId", "Id");

                                                    b4.ToTable("Readers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("DirectionalityAdvancedConfigModeSpecificSettingsReaderConfigurationReaderId");
                                                });

                                            b3.Navigation("Aars");
                                        });

                                    b2.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.DirectionalityBasicConfig", "BasicConfig", b3 =>
                                        {
                                            b3.Property<Guid>("ModeSpecificSettingsReaderConfigurationReaderId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double?>("InnerZoneWidth")
                                                .HasColumnType("float");

                                            b3.Property<double?>("Orientation")
                                                .HasColumnType("float");

                                            b3.Property<double?>("ReaderHeight")
                                                .HasColumnType("float");

                                            b3.Property<double?>("TagHeight")
                                                .HasColumnType("float");

                                            b3.Property<double?>("ZoneExtension")
                                                .HasColumnType("float");

                                            b3.Property<string>("ZoneNames")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<int?>("ZonePlan")
                                                .HasColumnType("int");

                                            b3.HasKey("ModeSpecificSettingsReaderConfigurationReaderId");

                                            b3.ToTable("Readers");

                                            b3.WithOwner()
                                                .HasForeignKey("ModeSpecificSettingsReaderConfigurationReaderId");
                                        });

                                    b2.Navigation("AdvancedConfig");

                                    b2.Navigation("BasicConfig");
                                });

                            b1.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.WorkflowSettings", "WorkflowSettings", b2 =>
                                {
                                    b2.Property<Guid>("ReaderConfigurationReaderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("ExpectedItemsCount")
                                        .HasColumnType("int");

                                    b2.Property<int>("InventoryDuration")
                                        .HasColumnType("int");

                                    b2.Property<int>("MovementContent")
                                        .HasColumnType("int");

                                    b2.Property<int>("MovementType")
                                        .HasColumnType("int");

                                    b2.HasKey("ReaderConfigurationReaderId");

                                    b2.ToTable("Readers");

                                    b2.WithOwner()
                                        .HasForeignKey("ReaderConfigurationReaderId");

                                    b2.OwnsOne("XRFID.Server.Demo.V2.Entities.ReaderCfg.TagFoundFilter", "TagFoundFilter", b3 =>
                                        {
                                            b3.Property<Guid>("WorkflowSettingsReaderConfigurationReaderId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("MinReadsCount")
                                                .HasColumnType("int");

                                            b3.Property<int>("MinReadsCountWeight")
                                                .HasColumnType("int");

                                            b3.Property<int>("MinRssi")
                                                .HasColumnType("int");

                                            b3.Property<int>("MinRssiWeight")
                                                .HasColumnType("int");

                                            b3.Property<double>("MinimumScore")
                                                .HasColumnType("float");

                                            b3.Property<int>("TagFoundMinReadCycles")
                                                .HasColumnType("int");

                                            b3.Property<int>("TagFoundMinReadCyclesWeight")
                                                .HasColumnType("int");

                                            b3.Property<int>("TagReportIntervalSeconds")
                                                .HasColumnType("int");

                                            b3.Property<int>("TimeSpanWeight")
                                                .HasColumnType("int");

                                            b3.HasKey("WorkflowSettingsReaderConfigurationReaderId");

                                            b3.ToTable("Readers");

                                            b3.WithOwner()
                                                .HasForeignKey("WorkflowSettingsReaderConfigurationReaderId");
                                        });

                                    b2.Navigation("TagFoundFilter");
                                });

                            b1.Navigation("ModeSpecificSettings");

                            b1.Navigation("WorkflowSettings")
                                .IsRequired();
                        });

                    b.Navigation("GPIOConfiguration")
                        .IsRequired();

                    b.Navigation("ReaderConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Sku", b =>
                {
                    b.HasOne("XRFID.Server.Demo.V2.Entities.Sku", "OldSku")
                        .WithOne("NewSku")
                        .HasForeignKey("XRFID.Server.Demo.V2.Entities.Sku", "OldSkuId");

                    b.Navigation("OldSku");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnit", b =>
                {
                    b.Navigation("LoadingUnitItems");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.LoadingUnitItem", b =>
                {
                    b.Navigation("MovementItems");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Location", b =>
                {
                    b.Navigation("ChildLocations");

                    b.Navigation("Printers");

                    b.Navigation("Readers");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Movement", b =>
                {
                    b.Navigation("LoadingUnits");

                    b.Navigation("MovementItems");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Printer", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Product", b =>
                {
                    b.Navigation("MovementItems");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Reader", b =>
                {
                    b.Navigation("LoadingUnits");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("XRFID.Server.Demo.V2.Entities.Sku", b =>
                {
                    b.Navigation("NewSku");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
