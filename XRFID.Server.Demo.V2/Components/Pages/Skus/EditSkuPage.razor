@page "/Skus/Edit/{Id:guid}"
@using System.ComponentModel.DataAnnotations;
@using XRFID.Server.Demo.V2.Entities
@using XRFID.Server.Demo.V2.Repositories.Interfaces
@using XRFID.Server.Demo.V2.ViewModels
@using Xerum.XFramework.DBAccess.Uow
@inject NavigationManager Navigation;
@inject ISkuRepository skuRepository;
@inject IUnitOfWork uow;

<h1>Edit Sku @model.Name?</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudStack Class="my-3">

        <DataAnnotationsValidator />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Name" For="()=>model.Name" @bind-Value="model.Name" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Description" For="()=>model.Description" @bind-Value="model.Description" Lines="10" />
        <MudDatePicker Variant="Variant.Outlined" Editable="true" Clearable="true" Label="Start Date" For="()=>model.StartDate" @bind-Date="model.StartDate" />
        <MudDatePicker Variant="Variant.Outlined" Editable="true" Clearable="true" Label="Expiration Date" For="()=>model.ExpirationDate" @bind-Date="model.ExpirationDate" />
        <MudStack Row="true" Class="my-6 d-flex justify-end">
            <MudButton OnClick="@(()=> Back())" Variant="Variant.Outlined" Color="Color.Default" Class="ml-3">Back</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3">Submit</MudButton>
        </MudStack>
    </MudStack>
</EditForm>



@code {
    [Parameter]
    public Guid Id { get; set; }
    private Sku? sku;
    private bool isDisabled = false;

    private AddSkuModel model = new AddSkuModel();

    protected override async Task OnInitializedAsync()
    {
        sku = await skuRepository.GetAsync(Id);
        if (sku is null)
        {
            return;
        }

        model = new AddSkuModel
            {
                Name = sku.Name ?? string.Empty,
                Reference = sku.Reference,
                Description = sku.Description,
                StartDate = sku.EffectivityStart?.DateTime,
                ExpirationDate = sku.EffectivityEnd?.DateTime,
            };
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (sku is null)
        {
            return;
        }


        await skuRepository.ExecuteUpdateAsync(l => l.Id == sku.Id,
            e => e.SetProperty(p => p.Name, model.Name)
                  .SetProperty(p => p.Description, model.Description)
                  .SetProperty(p => p.EffectivityStart, model.StartDate)
                  .SetProperty(p => p.EffectivityEnd, model.ExpirationDate));

        //fare comparire un popup che inserimento ok e rimanare alla pagina

        Navigation.NavigateTo($"Skus");

        StateHasChanged();
    }

    private void Back()
    {
        Navigation.NavigateTo($"Skus");
    }
}
