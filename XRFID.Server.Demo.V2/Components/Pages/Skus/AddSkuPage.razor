@page "/Skus/Add"
@using System.ComponentModel.DataAnnotations;
@using XRFID.Server.Demo.V2.Entities
@using XRFID.Server.Demo.V2.Repositories.Interfaces
@using XRFID.Server.Demo.V2.ViewModels
@using Xerum.XFramework.DBAccess.Uow
@inject NavigationManager Navigation;
@inject ISkuRepository skuRepository;
@inject IUnitOfWork uow;

<h1>Add New Sku</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudStack Class="my-3">

        <DataAnnotationsValidator />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Name" For="()=>model.Name" @bind-Value="model.Name" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Reference" For="()=>model.Reference" @bind-Value="model.Reference" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Description" For="()=>model.Description" @bind-Value="model.Description" Lines="10" />
        <MudDatePicker Variant="Variant.Outlined" Editable="true" Clearable="true" Label="Start Date" For="()=>model.StartDate" @bind-Date="model.StartDate" />
        <MudDatePicker Variant="Variant.Outlined" Editable="true" Clearable="true" Label="Expiration Date" For="()=>model.ExpirationDate" @bind-Date="model.ExpirationDate" />
        <MudStack Row="true" Class="my-6 d-flex justify-end">
            <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Default" Class="ml-3">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3">Submit</MudButton>
        </MudStack>
    </MudStack>
</EditForm>


@code {
    private AddSkuModel model = new AddSkuModel();

    private async Task OnValidSubmit(EditContext context)
    {
        var result = await skuRepository.CreateAsync(new Sku
            {
                Name = model.Name,
                Description = model.Description,
                EffectivityStart = model.StartDate ?? DateTimeOffset.Now,
                EffectivityEnd = model.ExpirationDate ?? DateTimeOffset.Now,
                DateCreated = DateTimeOffset.Now,
                Reference = model.Reference
            });
        await uow.SaveAsync();
        //fare comparire un popup che inserimento ok e rimanare alla pagina

        Navigation.NavigateTo($"Skus");

        StateHasChanged();
    }


}
