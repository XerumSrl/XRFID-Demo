@page "/Labels/Edit/{Id:guid}"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using XRFID.Server.Demo.V2.Entities
@using XRFID.Server.Demo.V2.Helpers
@using XRFID.Server.Demo.V2.Repositories.Interfaces
@using XRFID.Server.Demo.V2.ViewModels
@using Xerum.XFramework.Common.Enums;
@using Xerum.XFramework.DBAccess.Uow
@inject NavigationManager Navigation;
@inject ISkuRepository skuRepository;
@inject ILabelRepository labelRepository;
@inject IUnitOfWork uow;
@inject ISnackbar snackbar;

<h1>Edit Label @model.Name?</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudStack Class="my-3">

        <DataAnnotationsValidator />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Name" For="()=>model.Name" Value="@labelName" ValueChanged="(x)=>OnTextChanged(x)" AutoFocus="true" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="Description" For="()=>model.Description" @bind-Value="model.Description" />
        <MudTextField T="int" Variant="Variant.Outlined" Label="Version" For="()=>model.Version" @bind-Value="model.Version" Disabled="true" />
        <MudSelect Label="Language" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@model.Language" Required="true">
            @foreach (PrinterLanguage item in Enum.GetValues(typeof(PrinterLanguage)))
            {
                <MudSelectItem Value="@item">@EnumHelper.GetDisplayText(item)</MudSelectItem>
            }
        </MudSelect>
        <MudCheckBox T="bool" Variant="Variant.Outlined" Label="Is Active" For="()=>model.IsActive" @bind-Checked="model.IsActive" />

        <MudTextField T="string" Variant="Variant.Outlined" Label="Template" For="()=>model.Content" @bind-Value="model.Content" Lines="10" />

        <MudStack Row="true" Class="my-6 d-flex justify-end">
            <MudButton OnClick="@(()=> Back())" Variant="Variant.Outlined" Color="Color.Default" Class="ml-3">Back</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-3">Submit</MudButton>
        </MudStack>
    </MudStack>
</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }
    private Label? label;

    private AddLabelModel model = new();

    protected override async Task OnInitializedAsync()
    {
        label = await labelRepository.GetAsync(Id);
        if (label is null)
        {
            snackbar.Add("Invalid label Id.", Severity.Error);
            return;
        }
        initialLabelName = label.Name;
        initialLabelVersion = label.Version;
        labelName = label.Name;
        model = new AddLabelModel
            {
                Name = label.Name,
                Description = label.Description,
                Version = label.Version,
                IsActive = label.IsActive,
                Language = label.Language,
                Content = label.Content,

            };
    }

    private async Task OnValidSubmit(EditContext context)
    {
        
        await labelRepository.ExecuteUpdateAsync(l => l.Id == label.Id,
            e => e.SetProperty(p => p.Name, model.Name)
                  .SetProperty(p => p.Description, model.Description)
                  .SetProperty(p => p.Language, model.Language)
                  .SetProperty(p => p.Content, model.Content)
                  .SetProperty(p => p.IsActive, model.IsActive));

        //fare comparire un popup che inserimento ok e rimanare alla pagina

        Navigation.NavigateTo($"Labels");

        StateHasChanged();
        snackbar.Add($"Label {model.Name} updated.", Severity.Success);

    }

    private void Back()
    {
        Navigation.NavigateTo($"Labels");

    }

    private string labelName = "";
    private string initialLabelName;
    private int initialLabelVersion;
    private async Task OnTextChanged(string value)
    {
        if (value != initialLabelName)
        {
            var labels = await labelRepository.GetAsync(q => q.Name == value);
            if (labels.Any())
            {
                var maxVersion = labels.Max(q => q.Version);
                model.Version = maxVersion + 1;
            }
            else
            {
                model.Version = 1;
            }
            labelName = value;
            model.Name = value;
        }
        else
        {
            model.Version = initialLabelVersion;
        }
    }
}
